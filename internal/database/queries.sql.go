// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

type CreateBulkScoresParams struct {
	MatchID     uuid.UUID `json:"match_id"`
	GameID      uuid.UUID `json:"game_id"`
	Winner      string    `json:"winner"`
	WinnerScore int16     `json:"winner_score"`
	LoserScore  int16     `json:"loser_score"`
	CreatedAt   time.Time `json:"created_at"`
	PlayedAt    time.Time `json:"played_at"`
}

const createMatch = `-- name: CreateMatch :one
INSERT INTO matches (id, player_1, player_2, created_at)
VALUES ($1, $2, $3, $4)
RETURNING id, player_1, player_2, created_at
`

type CreateMatchParams struct {
	ID        uuid.UUID `json:"id"`
	Player1   string    `json:"player_1"`
	Player2   string    `json:"player_2"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) (Match, error) {
	row := q.db.QueryRow(ctx, createMatch,
		arg.ID,
		arg.Player1,
		arg.Player2,
		arg.CreatedAt,
	)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.Player1,
		&i.Player2,
		&i.CreatedAt,
	)
	return i, err
}

const createScore = `-- name: CreateScore :exec
INSERT INTO scores (match_id, game_id, winner, winner_score, loser_score, created_at, played_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateScoreParams struct {
	MatchID     uuid.UUID `json:"match_id"`
	GameID      uuid.UUID `json:"game_id"`
	Winner      string    `json:"winner"`
	WinnerScore int16     `json:"winner_score"`
	LoserScore  int16     `json:"loser_score"`
	CreatedAt   time.Time `json:"created_at"`
	PlayedAt    time.Time `json:"played_at"`
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) error {
	_, err := q.db.Exec(ctx, createScore,
		arg.MatchID,
		arg.GameID,
		arg.Winner,
		arg.WinnerScore,
		arg.LoserScore,
		arg.CreatedAt,
		arg.PlayedAt,
	)
	return err
}

const getMatch = `-- name: GetMatch :one
SELECT id, player_1, player_2
FROM matches
WHERE id = $1
`

type GetMatchRow struct {
	ID      uuid.UUID `json:"id"`
	Player1 string    `json:"player_1"`
	Player2 string    `json:"player_2"`
}

func (q *Queries) GetMatch(ctx context.Context, id uuid.UUID) (GetMatchRow, error) {
	row := q.db.QueryRow(ctx, getMatch, id)
	var i GetMatchRow
	err := row.Scan(&i.ID, &i.Player1, &i.Player2)
	return i, err
}

const getMatchScores = `-- name: GetMatchScores :many
SELECT match_id, game_id, winner, played_at, winner_score, loser_score
FROM scores
WHERE match_id = $1
  AND played_at > $2
ORDER BY played_at DESC
`

type GetMatchScoresParams struct {
	MatchID  uuid.UUID `json:"match_id"`
	PlayedAt time.Time `json:"played_at"`
}

type GetMatchScoresRow struct {
	MatchID     uuid.UUID `json:"match_id"`
	GameID      uuid.UUID `json:"game_id"`
	Winner      string    `json:"winner"`
	PlayedAt    time.Time `json:"played_at"`
	WinnerScore int16     `json:"winner_score"`
	LoserScore  int16     `json:"loser_score"`
}

func (q *Queries) GetMatchScores(ctx context.Context, arg GetMatchScoresParams) ([]GetMatchScoresRow, error) {
	rows, err := q.db.Query(ctx, getMatchScores, arg.MatchID, arg.PlayedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMatchScoresRow{}
	for rows.Next() {
		var i GetMatchScoresRow
		if err := rows.Scan(
			&i.MatchID,
			&i.GameID,
			&i.Winner,
			&i.PlayedAt,
			&i.WinnerScore,
			&i.LoserScore,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentScores = `-- name: GetRecentScores :many
SELECT match_id, game_id, winner, played_at, winner_score, loser_score
FROM scores
WHERE match_id = $1
ORDER BY played_at DESC
LIMIT 5
`

type GetRecentScoresRow struct {
	MatchID     uuid.UUID `json:"match_id"`
	GameID      uuid.UUID `json:"game_id"`
	Winner      string    `json:"winner"`
	PlayedAt    time.Time `json:"played_at"`
	WinnerScore int16     `json:"winner_score"`
	LoserScore  int16     `json:"loser_score"`
}

func (q *Queries) GetRecentScores(ctx context.Context, matchID uuid.UUID) ([]GetRecentScoresRow, error) {
	rows, err := q.db.Query(ctx, getRecentScores, matchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRecentScoresRow{}
	for rows.Next() {
		var i GetRecentScoresRow
		if err := rows.Scan(
			&i.MatchID,
			&i.GameID,
			&i.Winner,
			&i.PlayedAt,
			&i.WinnerScore,
			&i.LoserScore,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
